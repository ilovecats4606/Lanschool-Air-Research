"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloseAppEventModel = exports.ActiveClassEventModel = exports.ActiveInstructorsModel = exports.CloseTabsEventModel = exports.ChatReceivedEventModel = exports.HeartbeatEventModel = exports.CurrentScreenRequestEventModel = exports.RemoteExecuteEventModel = exports.LimitingRequestEventModel = exports.LimitingWebsitesRequestEventModel = exports.LimitingApplicationsRequestEventModel = exports.TelemetryRequestEventModel = exports.ThumbnailRequestEventModel = exports.LeaveClassEventModel = exports.JoinClassEventModel = exports.ConnectionStateChangeEventModel = void 0;
/* tslint:disable member-ordering */
const internal_1 = require("../internal");
const defs_1 = require("../js/defs");
class ConnectionStateChangeEventModel {
    constructor() {
        this.connected = internal_1.ConnectivityStatus.Disconnected;
        this.currentServer = '';
    }
    static fromAny(data) {
        var _a;
        if (!data) {
            return new ConnectionStateChangeEventModel();
        }
        if (data instanceof ConnectionStateChangeEventModel) {
            return data;
        }
        const ret = new ConnectionStateChangeEventModel();
        let c = ConnectionStateChangeEventModel.connectivityStatusFromConnectionStateEnum(data.connected);
        ret.connected = c ? c : internal_1.ConnectivityStatus.Disconnected;
        ret.currentServer = (_a = data.currentServer) !== null && _a !== void 0 ? _a : '';
        return ret;
    }
    static connectivityStatusFromConnectionStateEnum(connectionEnum) {
        let ret = internal_1.ConnectivityStatus.Disconnected;
        switch (connectionEnum) {
            case defs_1.ConnectionStateEnum.Connected: {
                ret = internal_1.ConnectivityStatus.Connected;
                break;
            }
            case defs_1.ConnectionStateEnum.Disconnected: {
                ret = internal_1.ConnectivityStatus.Disconnected;
                break;
            }
            case defs_1.ConnectionStateEnum.Trying: {
                ret = internal_1.ConnectivityStatus.Trying;
                break;
            }
        }
        return ret;
    }
}
exports.ConnectionStateChangeEventModel = ConnectionStateChangeEventModel;
class JoinClassEventModel {
    constructor() {
        this.classID = '';
        this.className = '';
        this.activeClassID = '';
        this.chatHistoryEnabled = false;
        this.webHistoryEnabled = false;
        this.classSocketDataTarget = '';
        this.classSocketDataUrl = '';
        this.studentRoom = '';
        this.teacherRoom = '';
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (!data) {
            return new JoinClassEventModel();
        }
        if (data instanceof JoinClassEventModel) {
            return data;
        }
        const ret = new JoinClassEventModel();
        ret.classID = (_a = data.classID) !== null && _a !== void 0 ? _a : '';
        ret.className = (_b = data.className) !== null && _b !== void 0 ? _b : '';
        ret.classSocketDataTarget = (_d = (_c = data.classSocketData) === null || _c === void 0 ? void 0 : _c.target) !== null && _d !== void 0 ? _d : '';
        ret.classSocketDataUrl = (_f = (_e = data.classSocketData) === null || _e === void 0 ? void 0 : _e.url) !== null && _f !== void 0 ? _f : '';
        ret.studentRoom = (_h = (_g = data.rooms) === null || _g === void 0 ? void 0 : _g.studentRoom) !== null && _h !== void 0 ? _h : '';
        ret.teacherRoom = (_k = (_j = data.rooms) === null || _j === void 0 ? void 0 : _j.teacherRoom) !== null && _k !== void 0 ? _k : '';
        ret.chatHistoryEnabled = (_l = data.chatHistoryEnabled) !== null && _l !== void 0 ? _l : false;
        ret.webHistoryEnabled = (_m = data.webHistoryEnabled) !== null && _m !== void 0 ? _m : false;
        ret.activeClassID = (_o = data.activeClassID) !== null && _o !== void 0 ? _o : '';
        return ret;
    }
}
exports.JoinClassEventModel = JoinClassEventModel;
class LeaveClassEventModel {
    constructor() {
        this.classID = '';
        this.studentRoom = '';
        this.teacherRoom = '';
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e;
        if (!data) {
            return new LeaveClassEventModel();
        }
        if (data instanceof LeaveClassEventModel) {
            return data;
        }
        const ret = new LeaveClassEventModel();
        ret.classID = (_a = data.classID) !== null && _a !== void 0 ? _a : '';
        ret.studentRoom = (_c = (_b = data.rooms) === null || _b === void 0 ? void 0 : _b.studentRoom) !== null && _c !== void 0 ? _c : '';
        ret.teacherRoom = (_e = (_d = data.rooms) === null || _d === void 0 ? void 0 : _d.teacherRoom) !== null && _e !== void 0 ? _e : '';
        return ret;
    }
}
exports.LeaveClassEventModel = LeaveClassEventModel;
const _defaultTelemetryPeriod = 10000;
const _defaultTelemetrySendBattery = true;
const _defaultTelemetrySendCurrentApp = true;
const _defaultTelemetrySendCurrentWebsite = true;
const _defaultTelemetrySendRunningApplications = false;
const _defaultTelemetrySendThumbnails = false;
const _defaultTelemetrySendIntelliTaskInfo = false;
const _defaultTelemetryIntelliTaskInfoPeriod = 60000;
const _defaultTelemetryThumbnailHeight = internal_1.DEFAULT_THUMBNAIL_HEIGHT;
const _defaultTelemetryThumbnailWidth = internal_1.DEFAULT_THUMBNAIL_WIDTH;
const _defaultTelemetryFormatPref = ['PNG', 'JPG'];
class ThumbnailRequestEventModel {
    constructor() {
        this.thumbnailHeight = null;
        this.thumbnailWidth = null;
        this.thumbnailFormatPreference = null;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (!data) {
            return new ThumbnailRequestEventModel();
        }
        if (data instanceof ThumbnailRequestEventModel) {
            return data;
        }
        const ret = new ThumbnailRequestEventModel();
        ret.thumbnailHeight =
            (_d = (_c = (_b = (_a = data.telemetryMessage) === null || _a === void 0 ? void 0 : _a.thumbnail) === null || _b === void 0 ? void 0 : _b.desiredSize) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : _defaultTelemetryThumbnailHeight;
        ret.thumbnailWidth =
            (_h = (_g = (_f = (_e = data.telemetryMessage) === null || _e === void 0 ? void 0 : _e.thumbnail) === null || _f === void 0 ? void 0 : _f.desiredSize) === null || _g === void 0 ? void 0 : _g.width) !== null && _h !== void 0 ? _h : _defaultTelemetryThumbnailWidth;
        ret.thumbnailFormatPreference =
            (_l = (_k = (_j = data.telemetryMessage) === null || _j === void 0 ? void 0 : _j.thumbnail) === null || _k === void 0 ? void 0 : _k.formatPref) !== null && _l !== void 0 ? _l : _defaultTelemetryFormatPref;
        return ret;
    }
}
exports.ThumbnailRequestEventModel = ThumbnailRequestEventModel;
class TelemetryRequestEventModel {
    constructor() {
        this.period = _defaultTelemetryPeriod;
        this.sendBattery = _defaultTelemetrySendBattery;
        this.sendCurrentApp = _defaultTelemetrySendCurrentApp;
        this.sendCurrentWebsite = _defaultTelemetrySendCurrentWebsite;
        this.sendRunningApplications = _defaultTelemetrySendRunningApplications;
        this.sendThumbnails = _defaultTelemetrySendThumbnails;
        this.sendIntelliTaskInfo = _defaultTelemetrySendIntelliTaskInfo;
        this.intelliTaskInfoPeriod = _defaultTelemetryIntelliTaskInfoPeriod;
        this.thumbnailParams = null;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        if (!data) {
            return new TelemetryRequestEventModel();
        }
        if (data instanceof TelemetryRequestEventModel) {
            return data;
        }
        const ret = new TelemetryRequestEventModel();
        ret.period = (_b = (_a = data.telemetryMessage) === null || _a === void 0 ? void 0 : _a.period) !== null && _b !== void 0 ? _b : _defaultTelemetryPeriod;
        ret.sendBattery =
            (_d = (_c = data.telemetryMessage) === null || _c === void 0 ? void 0 : _c.sendBattery) !== null && _d !== void 0 ? _d : _defaultTelemetrySendBattery;
        ret.sendCurrentApp =
            (_f = (_e = data.telemetryMessage) === null || _e === void 0 ? void 0 : _e.sendCurrentApp) !== null && _f !== void 0 ? _f : _defaultTelemetrySendCurrentApp;
        ret.sendCurrentWebsite =
            (_h = (_g = data.telemetryMessage) === null || _g === void 0 ? void 0 : _g.sendCurrentWebsite) !== null && _h !== void 0 ? _h : _defaultTelemetrySendCurrentWebsite;
        ret.sendRunningApplications =
            (_k = (_j = data.telemetryMessage) === null || _j === void 0 ? void 0 : _j.sendRunningApplications) !== null && _k !== void 0 ? _k : _defaultTelemetrySendRunningApplications;
        ret.sendThumbnails =
            (_m = (_l = data.telemetryMessage) === null || _l === void 0 ? void 0 : _l.sendThumbnails) !== null && _m !== void 0 ? _m : _defaultTelemetrySendThumbnails;
        if (ret.sendThumbnails === true) {
            ret.thumbnailParams = ThumbnailRequestEventModel.fromAny(data);
        }
        ret.sendIntelliTaskInfo =
            (_p = (_o = data.telemetryMessage) === null || _o === void 0 ? void 0 : _o.sendIntelliTaskInfo) !== null && _p !== void 0 ? _p : _defaultTelemetrySendIntelliTaskInfo;
        ret.intelliTaskInfoPeriod =
            (_r = (_q = data.telemetryMessage) === null || _q === void 0 ? void 0 : _q.intelliTaskInfoPeriod) !== null && _r !== void 0 ? _r : _defaultTelemetryIntelliTaskInfoPeriod;
        return ret;
    }
}
exports.TelemetryRequestEventModel = TelemetryRequestEventModel;
const _defaultLimitingApplications = false;
const _defaultLimitingDesktop = false;
const _defaultLimitingDesktopKioskMode = true;
const _defaultLimitingPrinting = false;
const _defaultLimitingSound = false;
const _defaultLimitingWebsites = false;
class LimitingApplicationsRequestEventModel {
    constructor() {
        this.allowedApplications = null;
        this.blockedApplications = null;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f;
        if (!data) {
            return new LimitingApplicationsRequestEventModel();
        }
        if (data instanceof LimitingApplicationsRequestEventModel) {
            return data;
        }
        const ret = new LimitingApplicationsRequestEventModel();
        ret.allowedApplications =
            (_c = (_b = (_a = data.limitStateMessage) === null || _a === void 0 ? void 0 : _a.applications) === null || _b === void 0 ? void 0 : _b.allowed) !== null && _c !== void 0 ? _c : new Array();
        ret.blockedApplications =
            (_f = (_e = (_d = data.limitStateMessage) === null || _d === void 0 ? void 0 : _d.applications) === null || _e === void 0 ? void 0 : _e.blocked) !== null && _f !== void 0 ? _f : new Array();
        return ret;
    }
}
exports.LimitingApplicationsRequestEventModel = LimitingApplicationsRequestEventModel;
const _defaultLimitingWebsitesBlockAll = false;
const _defaultLimitingWebsitesBlockEdge = false;
const _defaultLimitingWebsitesBlockIncognito = false;
const _defaultLimitingWebsitesBlockIPAddresses = false;
class LimitingWebsitesRequestEventModel {
    constructor() {
        this.allowedWebsites = null;
        this.blockedWebsites = null;
        this.blockAll = _defaultLimitingWebsitesBlockAll;
        this.blockEdge = _defaultLimitingWebsitesBlockEdge;
        this.blockIncognito = _defaultLimitingWebsitesBlockIncognito;
        this.blockIPAddresses = _defaultLimitingWebsitesBlockIPAddresses;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (!data) {
            return new LimitingWebsitesRequestEventModel();
        }
        if (data instanceof LimitingWebsitesRequestEventModel) {
            return data;
        }
        const ret = new LimitingWebsitesRequestEventModel();
        ret.allowedWebsites =
            (_c = (_b = (_a = data.limitStateMessage) === null || _a === void 0 ? void 0 : _a.websites) === null || _b === void 0 ? void 0 : _b.allowed) !== null && _c !== void 0 ? _c : new Array();
        ret.blockedWebsites =
            (_f = (_e = (_d = data.limitStateMessage) === null || _d === void 0 ? void 0 : _d.websites) === null || _e === void 0 ? void 0 : _e.blocked) !== null && _f !== void 0 ? _f : new Array();
        ret.blockAll =
            (_j = (_h = (_g = data.limitStateMessage) === null || _g === void 0 ? void 0 : _g.websites) === null || _h === void 0 ? void 0 : _h.blockAll) !== null && _j !== void 0 ? _j : _defaultLimitingWebsitesBlockAll;
        ret.blockEdge =
            (_m = (_l = (_k = data.limitStateMessage) === null || _k === void 0 ? void 0 : _k.websites) === null || _l === void 0 ? void 0 : _l.blockEdge) !== null && _m !== void 0 ? _m : _defaultLimitingWebsitesBlockEdge;
        ret.blockIncognito =
            (_q = (_p = (_o = data.limitStateMessage) === null || _o === void 0 ? void 0 : _o.websites) === null || _p === void 0 ? void 0 : _p.blockIncognito) !== null && _q !== void 0 ? _q : _defaultLimitingWebsitesBlockIncognito;
        ret.blockIPAddresses =
            (_t = (_s = (_r = data.limitStateMessage) === null || _r === void 0 ? void 0 : _r.websites) === null || _s === void 0 ? void 0 : _s.blockIPAddresses) !== null && _t !== void 0 ? _t : _defaultLimitingWebsitesBlockIPAddresses;
        return ret;
    }
}
exports.LimitingWebsitesRequestEventModel = LimitingWebsitesRequestEventModel;
class LimitingRequestEventModel {
    constructor() {
        this.applicationsLimited = _defaultLimitingApplications;
        this.applicationsLimitedParams = null;
        this.desktopLimited = _defaultLimitingDesktop;
        this.desktopLimitingMessage = null;
        this.desktopKioskMode = _defaultLimitingDesktopKioskMode;
        this.printingLimited = _defaultLimitingPrinting;
        this.soundLimited = _defaultLimitingSound;
        this.websitesLimited = _defaultLimitingWebsites;
        this.websitesLimitedParams = null;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        if (!data) {
            return new LimitingRequestEventModel();
        }
        if (data instanceof LimitingRequestEventModel) {
            return data;
        }
        const ret = new LimitingRequestEventModel();
        ret.applicationsLimited =
            (_c = (_b = (_a = data.limitStateMessage) === null || _a === void 0 ? void 0 : _a.applications) === null || _b === void 0 ? void 0 : _b.limit) !== null && _c !== void 0 ? _c : _defaultLimitingApplications;
        if (ret.applicationsLimited === true) {
            ret.applicationsLimitedParams =
                LimitingApplicationsRequestEventModel.fromAny(data);
        }
        ret.desktopLimited =
            (_f = (_e = (_d = data.limitStateMessage) === null || _d === void 0 ? void 0 : _d.desktop) === null || _e === void 0 ? void 0 : _e.limit) !== null && _f !== void 0 ? _f : _defaultLimitingDesktop;
        ret.desktopKioskMode =
            (_j = (_h = (_g = data.limitStateMessage) === null || _g === void 0 ? void 0 : _g.desktop) === null || _h === void 0 ? void 0 : _h.kioskMode) !== null && _j !== void 0 ? _j : _defaultLimitingDesktopKioskMode;
        ret.desktopLimitingMessage =
            (_m = (_l = (_k = data.limitStateMessage) === null || _k === void 0 ? void 0 : _k.desktop) === null || _l === void 0 ? void 0 : _l.message) !== null && _m !== void 0 ? _m : null;
        ret.printingLimited =
            (_q = (_p = (_o = data.limitStateMessage) === null || _o === void 0 ? void 0 : _o.printing) === null || _p === void 0 ? void 0 : _p.limit) !== null && _q !== void 0 ? _q : _defaultLimitingPrinting;
        ret.soundLimited =
            (_t = (_s = (_r = data.limitStateMessage) === null || _r === void 0 ? void 0 : _r.sound) === null || _s === void 0 ? void 0 : _s.limit) !== null && _t !== void 0 ? _t : _defaultLimitingSound;
        ret.websitesLimited =
            (_w = (_v = (_u = data.limitStateMessage) === null || _u === void 0 ? void 0 : _u.websites) === null || _v === void 0 ? void 0 : _v.limit) !== null && _w !== void 0 ? _w : _defaultLimitingWebsites;
        if (ret.websitesLimited === true) {
            ret.websitesLimitedParams =
                LimitingWebsitesRequestEventModel.fromAny(data);
        }
        return ret;
    }
}
exports.LimitingRequestEventModel = LimitingRequestEventModel;
class RemoteExecuteEventModel {
    constructor() {
        this.path = '';
        this.teacherInfo = null;
    }
    static fromAny(data) {
        var _a, _b, _c;
        if (!data) {
            return new RemoteExecuteEventModel();
        }
        if (data instanceof RemoteExecuteEventModel) {
            return data;
        }
        const ret = new RemoteExecuteEventModel();
        ret.path = (_b = (_a = data.remoteExecute) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';
        ret.teacherInfo = (_c = data.teacherInfo) !== null && _c !== void 0 ? _c : null;
        return ret;
    }
}
exports.RemoteExecuteEventModel = RemoteExecuteEventModel;
const _defaultCurrentScreenOverlayTimeDate = true;
const _defaultCurrentScreenUserName = true;
class CurrentScreenRequestEventModel {
    constructor() {
        this.overlayTimeDate = _defaultCurrentScreenOverlayTimeDate;
        this.overlayUserName = _defaultCurrentScreenUserName;
    }
    static fromAny(data) {
        var _a, _b;
        if (!data) {
            return new CurrentScreenRequestEventModel();
        }
        if (data instanceof CurrentScreenRequestEventModel) {
            return data;
        }
        const ret = new CurrentScreenRequestEventModel();
        ret.overlayTimeDate =
            (_a = data.overlayTimeDate) !== null && _a !== void 0 ? _a : _defaultCurrentScreenOverlayTimeDate;
        ret.overlayUserName =
            (_b = data.overlayUserName) !== null && _b !== void 0 ? _b : _defaultCurrentScreenUserName;
        return ret;
    }
}
exports.CurrentScreenRequestEventModel = CurrentScreenRequestEventModel;
class HeartbeatEventModel {
    constructor() {
        this.validFor = null;
    }
    static fromAny(data) {
        var _a, _b;
        if (!data) {
            return new HeartbeatEventModel();
        }
        if (data instanceof HeartbeatEventModel) {
            return data;
        }
        const ret = new HeartbeatEventModel();
        ret.validFor = (_b = (_a = data.heartbeatMessage) === null || _a === void 0 ? void 0 : _a.validFor) !== null && _b !== void 0 ? _b : null;
        return ret;
    }
}
exports.HeartbeatEventModel = HeartbeatEventModel;
class ChatReceivedEventModel {
    constructor() {
        this.from = '';
        this.message = '';
        this.sendTime = null;
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f;
        if (!data) {
            return new ChatReceivedEventModel();
        }
        if (data instanceof ChatReceivedEventModel) {
            return data;
        }
        const ret = new ChatReceivedEventModel();
        ret.from = (_b = (_a = data.sendChatMessage) === null || _a === void 0 ? void 0 : _a.sender) !== null && _b !== void 0 ? _b : 'Teacher';
        ret.message = (_d = (_c = data.sendChatMessage) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : '';
        ret.sendTime = (_f = (_e = data.sendChatMessage) === null || _e === void 0 ? void 0 : _e.sendTime) !== null && _f !== void 0 ? _f : null;
        return ret;
    }
}
exports.ChatReceivedEventModel = ChatReceivedEventModel;
class CloseTabsEventModel {
    constructor() {
        this.tabIds = [];
    }
    static fromAny(data) {
        var _a;
        if (!data) {
            return new CloseTabsEventModel();
        }
        if (data instanceof CloseTabsEventModel) {
            return data;
        }
        const ret = new CloseTabsEventModel();
        try {
            ret.tabIds = (_a = data.closeTabs) === null || _a === void 0 ? void 0 : _a.tabIds;
        }
        catch (err) {
        }
        return ret;
    }
}
exports.CloseTabsEventModel = CloseTabsEventModel;
class ActiveInstructorsModel {
    constructor() {
        this.activeInstructors = [];
    }
    static fromArray(data) {
        if (!data) {
            return new ActiveInstructorsModel();
        }
        const ret = new ActiveInstructorsModel();
        for (let i = 0; i < data.length; i++) {
            ret.activeInstructors.push(data[i]);
        }
        return ret;
    }
    clear() {
        this.activeInstructors = [];
    }
}
exports.ActiveInstructorsModel = ActiveInstructorsModel;
class ActiveClassEventModel {
    constructor() {
        this.activeClassID = '';
        this.classID = '';
        this.className = '';
        this.classSocketData = {
            url: '',
            target: ''
        };
        this.teacherInfo = {
            firstName: '',
            lastName: ''
        };
        this.rooms = {
            teacherRoom: '',
            studentRoom: ''
        };
    }
}
exports.ActiveClassEventModel = ActiveClassEventModel;
class CloseAppEventModel {
    constructor() {
        this.closeKey = '';
    }
    static fromAny(data) {
        var _a;
        if (data instanceof CloseAppEventModel) {
            return data;
        }
        const ret = new CloseAppEventModel();
        ret.closeKey = (_a = data.closeKey) !== null && _a !== void 0 ? _a : '';
        return ret;
    }
}
exports.CloseAppEventModel = CloseAppEventModel;
//# sourceMappingURL=eventModels.js.map