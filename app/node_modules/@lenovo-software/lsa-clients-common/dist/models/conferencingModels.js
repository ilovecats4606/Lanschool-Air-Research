"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConferenceAttendeeNamesEventModel = exports.ConferenceAttendeeNameMap = exports.ConferenceDirectiveModel = exports.ConferenceTypeEnum = void 0;
const _TeacherConferenceTypeNone = require('../js/defs').TEACHER_CONFERENCE_TYPE_NONE;
const _TeacherConferenceTypeAudio = require('../js/defs').TEACHER_CONFERENCE_TYPE_AUDIO;
const _TeacherConferenceTypeVideo = require('../js/defs').TEACHER_CONFERENCE_TYPE_VIDEO;
const _StudentConferenceTypeVideo = require('../js/defs').STUDENT_CONFERENCE_TYPE_VIDEO;
var ConferenceTypeEnum;
(function (ConferenceTypeEnum) {
    ConferenceTypeEnum[ConferenceTypeEnum["TeacherConferenceTypeNone"] = _TeacherConferenceTypeNone] = "TeacherConferenceTypeNone";
    ConferenceTypeEnum[ConferenceTypeEnum["TeacherConferenceTypeAudio"] = _TeacherConferenceTypeAudio] = "TeacherConferenceTypeAudio";
    ConferenceTypeEnum[ConferenceTypeEnum["TeacherConferenceTypeVideo"] = _TeacherConferenceTypeVideo] = "TeacherConferenceTypeVideo";
    ConferenceTypeEnum[ConferenceTypeEnum["StudentConferenceTypeVideo"] = _StudentConferenceTypeVideo] = "StudentConferenceTypeVideo";
})(ConferenceTypeEnum = exports.ConferenceTypeEnum || (exports.ConferenceTypeEnum = {}));
const _defaultConferenceTypeValue = ConferenceTypeEnum.TeacherConferenceTypeNone;
const _defaultWindowed = false;
class ConferenceDirectiveModel {
    constructor() {
        this.conferenceServerId = '';
        this.conferenceServerUrl = '';
        this.attendeeId = '';
        this.conferenceId = null;
        this.viewerConferenceToken = '';
        this.broadcasterConferenceToken = '';
        this.conferenceType = _defaultConferenceTypeValue;
        this.videoMediaHandle = '';
        this.audioMediaHandle = '';
        this.windowed = _defaultWindowed;
        this.teacherAttendeeId = '';
        this.apiServer = '';
        this.classId = '';
        this.oauthToken = '';
    }
    static fromAny(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
        if (!data) {
            return new ConferenceDirectiveModel();
        }
        if (data instanceof ConferenceDirectiveModel) {
            return Object.assign({}, data);
        }
        const ret = new ConferenceDirectiveModel();
        ret.conferenceServerId = (_b = (_a = data.conferenceData) === null || _a === void 0 ? void 0 : _a.conferenceServerId) !== null && _b !== void 0 ? _b : '';
        ret.conferenceServerUrl = (_d = (_c = data.conferenceData) === null || _c === void 0 ? void 0 : _c.conferenceServerUrl) !== null && _d !== void 0 ? _d : '';
        ret.attendeeId = (_f = (_e = data.conferenceData) === null || _e === void 0 ? void 0 : _e.attendeeId) !== null && _f !== void 0 ? _f : '';
        ret.conferenceId = (_h = (_g = data.conferenceData) === null || _g === void 0 ? void 0 : _g.conferenceId) !== null && _h !== void 0 ? _h : null;
        ret.viewerConferenceToken = (_k = (_j = data.conferenceData) === null || _j === void 0 ? void 0 : _j.viewerConferenceToken) !== null && _k !== void 0 ? _k : '';
        ret.broadcasterConferenceToken = (_m = (_l = data.conferenceData) === null || _l === void 0 ? void 0 : _l.broadcasterConferenceToken) !== null && _m !== void 0 ? _m : '';
        ret.conferenceType = (_p = (_o = data.conferenceData) === null || _o === void 0 ? void 0 : _o.conferenceType) !== null && _p !== void 0 ? _p : _defaultConferenceTypeValue;
        ret.videoMediaHandle = (_r = (_q = data.teacherData) === null || _q === void 0 ? void 0 : _q.videoMediaHandle) !== null && _r !== void 0 ? _r : '';
        ret.audioMediaHandle = (_t = (_s = data.teacherData) === null || _s === void 0 ? void 0 : _s.audioMediaHandle) !== null && _t !== void 0 ? _t : '';
        ret.windowed = (_v = (_u = data.teacherData) === null || _u === void 0 ? void 0 : _u.windowed) !== null && _v !== void 0 ? _v : _defaultWindowed;
        ret.teacherAttendeeId = (_x = (_w = data.conferenceData) === null || _w === void 0 ? void 0 : _w.teacherAttendeeId) !== null && _x !== void 0 ? _x : '';
        ret.apiServer = (_y = data.apiServer) !== null && _y !== void 0 ? _y : '';
        ret.classId = (_z = data.classId) !== null && _z !== void 0 ? _z : '';
        ret.oauthToken = (_1 = (_0 = data.conferenceData) === null || _0 === void 0 ? void 0 : _0.oauthToken) !== null && _1 !== void 0 ? _1 : '';
        return ret;
    }
}
exports.ConferenceDirectiveModel = ConferenceDirectiveModel;
class ConferenceAttendeeNameMap {
    constructor() {
        this.attendeeId = '';
        this.attendeeName = '';
    }
}
exports.ConferenceAttendeeNameMap = ConferenceAttendeeNameMap;
class ConferenceAttendeeNamesEventModel {
    constructor() {
        this.conferenceAttendeeNames = null;
    }
    static fromAny(data) {
        if (!data) {
            return new ConferenceAttendeeNamesEventModel();
        }
        if (data instanceof ConferenceAttendeeNamesEventModel) {
            return data;
        }
        const ret = new ConferenceAttendeeNamesEventModel();
        if (Array.isArray(data)) {
            ret.conferenceAttendeeNames = new Array();
            for (let i = 0; i < data.length; i++) {
                if (!data[i].attendeeId || !data[i].attendeeName) {
                    continue;
                }
                const entry = new ConferenceAttendeeNameMap();
                entry.attendeeId = data[i].attendeeId;
                entry.attendeeName = data[i].attendeeName;
                ret.conferenceAttendeeNames.push(entry);
            }
        }
        return ret;
    }
}
exports.ConferenceAttendeeNamesEventModel = ConferenceAttendeeNamesEventModel;
//# sourceMappingURL=conferencingModels.js.map