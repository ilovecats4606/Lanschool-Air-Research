"use strict";
/**
 * waitUntil.ts
 *
 * The enclosed material is Lenovo confidential and is the sole property of Lenovo.
 * Unauthorized disclosure, distribution or other use of this material is expressly prohibited.
 *
 * Â© 2022 Lenovo Group Ltd.
 *
 * Created on August 03, 2022.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitUntil = void 0;
/**
 * Waits until a condition becomes true or the timeout has been reached. The "condition" becomes true when the conditionFn returns true.
 *
 * @param conditionFn This function returns false to indicate we should continue waiting until it either returns true or
 * we reach the timeout.
 * @param param1 A destructured/defaulted options object.
 * @param param1.timeoutMs The maximum/total amount of time in milliseconds to wait for the condition to become true.
 * @param param1.intervalMs The amount of time in milliseconds to wait before checking again to see if the condition has become true.
 * @param param1.throwError If true, an error will be thrown if the timeout has been reached.
 * @returns True if the condition becomes true. False if the timeout has been reached (or an error thrown if throwError is true).
 */
async function waitUntil(conditionFn, { timeoutMs = 1500, intervalMs = 10, throwError = true } = {}) {
    const startTime = Date.now();
    while (!conditionFn()) {
        await new Promise(resolve => setTimeout(resolve, intervalMs));
        const elapsedTime = Date.now() - startTime;
        if (elapsedTime > timeoutMs) {
            if (throwError) {
                throw new Error(`The waitUntil exceeded the ${timeoutMs} ms timeout.`);
            }
            return false;
        }
    }
    return true;
}
exports.waitUntil = waitUntil;
//# sourceMappingURL=waitUntil.js.map