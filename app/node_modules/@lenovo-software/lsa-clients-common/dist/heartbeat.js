"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Heartbeat = exports.defaultHeartbeatPeriod = exports.heartbeatGracePeriod = void 0;
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("./internal");
const logger = new internal_1.LoggerInterop();
exports.heartbeatGracePeriod = 20000;
exports.defaultHeartbeatPeriod = 60000;
class Heartbeat {
    constructor() {
        this.heartbeatTimerId = null;
        pubsub_js_1.default.subscribe('onHeartbeatReceived', (msg, data) => {
            this.onHeartBeatReceived(data);
        });
        pubsub_js_1.default.subscribe('onLeaveClassPostProcess', () => {
            this.cancelHeartbeatTimer();
        });
        internal_1.chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            switch (request.message) {
                case 'UserRejectsMonitoring':
                    {
                        logger.logDebug(`Heartbeat.chrome message listener(): received UserRejectsMonitoring.`);
                        this.cancelHeartbeatTimer();
                        break;
                    }
            }
        });
    }
    onHeartBeatReceived(data) {
        if (!data.heartbeatMessage) {
            logger.logError('ERROR: onHeartbeatReceived missing heartbeatMessage.');
            return;
        }
        let timeSpan = exports.defaultHeartbeatPeriod + exports.heartbeatGracePeriod;
        if (!data.heartbeatMessage.validFor ||
            !Heartbeat.isNumber(data.heartbeatMessage.validFor) ||
            data.heartbeatMessage.validFor < 1000) {
            logger.logError('ERROR: onHeartbeatReceived missing validFor or invalid value. Using ' +
                timeSpan +
                '.');
        }
        else {
            timeSpan = Number(data.heartbeatMessage.validFor) + exports.heartbeatGracePeriod;
        }
        logger.logMessage('Received heartbeat from teacher: ' + timeSpan);
        // TODO: Send this to the UI when we have it
        // if (classChannel)
        //     LStudent.chatWindowState.classId = classChannel.getClassName();
        // setChatWindowState(LStudent.chatWindowState);
        this.setHeartbeatTimer(timeSpan);
    }
    static isNumber(value) {
        return (value != null && value !== '' && !isNaN(Number(value.toString())));
    }
    cancelHeartbeatTimer() {
        if (this.heartbeatTimerId) {
            clearInterval(this.heartbeatTimerId);
        }
    }
    setHeartbeatTimer(timeSpan) {
        if (timeSpan < 1) {
            timeSpan = exports.defaultHeartbeatPeriod + exports.heartbeatGracePeriod;
        }
        this.cancelHeartbeatTimer();
        this.heartbeatTimerId = setInterval(() => {
            this.cancelHeartbeatTimer();
            logger.logWarning('Heartbeat timeout expired!');
            pubsub_js_1.default.publish('onHeartbeatTimeout', timeSpan);
        }, timeSpan);
    }
}
exports.Heartbeat = Heartbeat;
//# sourceMappingURL=heartbeat.js.map