"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgDataRetriever = exports.OrgModel = void 0;
// For lsa-common-client
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("./internal");
const logger = new internal_1.LoggerInterop();
class OrgModel {
    constructor(s) {
        this.name = '';
        this.vanityName = '';
        this.orgID = '';
        this.isVerified = false;
        this.archived = false;
        this.toModel(s);
    }
    toModel(s) {
        if (s) {
            this.name = s.name;
            this.vanityName = s.vanityName;
            this.orgID = s.orgID;
            this.isVerified = s.isVerified;
            this.archived = s.archived;
        }
    }
}
exports.OrgModel = OrgModel;
class OrgDataRetriever {
    constructor() {
        this.apiServer = '';
        this.orgId = '';
        this.provisioningCode = '';
    }
    getAuthToken() {
        return internal_1.AccessToken.getAccessToken(this.apiServer, internal_1.UserInfoRetriever.getDeviceID(), this.provisioningCode);
    }
    setRetrieverParamsForOrgVerification(apiServer, provisioningCode) {
        this.apiServer = apiServer;
        this.provisioningCode = provisioningCode;
    }
    setRetrieverParamsForOrgData(apiServer, orgId, provisioningCode) {
        this.apiServer = apiServer;
        this.orgId = orgId;
        this.provisioningCode = provisioningCode;
    }
    getRealURL(apiServer, orgId, endpoint) {
        let realURL = apiServer;
        if (!realURL.startsWith('https://')) {
            realURL = 'https://' + realURL;
        }
        if (!realURL.endsWith('/')) {
            realURL += '/';
        }
        const endpointForOrg = endpoint.replace('$ORG', orgId);
        realURL += endpointForOrg;
        return realURL;
    }
    retrieveOrgVerification() {
        return this.getOrgData(this.getRealURL(this.apiServer, '', '0/lsa/common/organizations/checkVerified'));
    }
    retrieveOrgData() {
        if (!this.orgId) {
            throw new Error('OrgDataRetriever.retrieveOrgData(): Missing orgId.');
        }
        return this.getOrgData(this.getRealURL(this.apiServer, this.orgId, '0/lsa/common/organizations/$ORG'));
    }
    getOrgData(url) {
        return new Promise(async (resolve, reject) => {
            // routeVerifier.verify(url, async (realURL: string) => {
            let authToken = "";
            try {
                const authResponse = await this.getAuthToken();
                if (!(authResponse === null || authResponse === void 0 ? void 0 : authResponse.access_token))
                    throw new Error('token object missing access_token.');
                authToken = authResponse.access_token;
            }
            catch (err) {
                logger.logError('OrgDataRetriever.retrieveOrgData: Error retrieving auth token: ' + err);
                reject(err);
            }
            logger.logMessage('OrgDataRetriever.retrieveOrgData: Gathering...' + url);
            const request = new internal_1.HttpRequest(url, {
                headers: {
                    Authorization: authToken
                }
            });
            const response = await request.doRequest();
            if (response.status === 200) {
                try {
                    const retObj = response.json;
                    if (retObj) {
                        resolve(new OrgModel(retObj));
                    }
                }
                catch (err) {
                    reject('OrgDataRetriever.getOrgData(): Error constructing OrgModel: ' + JSON.stringify(err));
                }
            }
            else if (response.status === 401 || response.status === 403) {
                pubsub_js_1.default.publish('onTokenFailure'); // Tell the controller to tear down the sockets
                reject(response.status);
            }
            else {
                logger.logWarning('orgDataCall returned something unexpected: ' + response.status);
                reject(response.status);
            }
            // });
        });
    }
}
exports.OrgDataRetriever = OrgDataRetriever;
//# sourceMappingURL=orgData.js.map