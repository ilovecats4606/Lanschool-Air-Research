"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebHistory = void 0;
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("./internal");
const lodash_1 = require("lodash");
const logger = new internal_1.LoggerInterop();
const filterUrls = [
    'chrome://newtab/',
    'chrome://new-tab-page/',
    'edge://newtab/',
    'about:blank',
    'chrome-search://local-ntp',
    'favorites://'
];
class WebHistory {
    constructor(storage, socketController, classChannel) {
        this.storage = storage;
        this.socketController = socketController;
        this.classChannel = classChannel;
        this.messageQueue = [];
        this.studentFullName = '';
        logger.logMessage(`WebHistory(+)`);
        pubsub_js_1.default.subscribe('onSendWebHistory', (msg, payload) => {
            var _a, _b;
            logger.logInfo(`onSendWebHistory: ${JSON.stringify(payload)}`);
            if ((_a = payload === null || payload === void 0 ? void 0 : payload.sendWebHistory) === null || _a === void 0 ? void 0 : _a.studentFullName) {
                this.studentFullName = (_b = payload === null || payload === void 0 ? void 0 : payload.sendWebHistory) === null || _b === void 0 ? void 0 : _b.studentFullName;
            }
        });
    }
    async addMissingData(webHistoryData) {
        let ret = (0, lodash_1.cloneDeep)(webHistoryData);
        if (!ret.who.id)
            ret.who.id = this.storage.loadLoginName();
        if (!ret.who.name)
            ret.who.name = this.storage.loadDisplayName();
        if (!ret.who.name && this.studentFullName)
            ret.who.name = this.studentFullName;
        if (!ret.who.name)
            ret.who.name = ret.who.id;
        if (!ret.orgID) {
            const provisioningData = this.storage.loadProvisioningData();
            if (provisioningData) {
                ret.orgID = provisioningData.orgId;
            }
        }
        if (!ret.classID && this.classChannel)
            ret.classID = this.classChannel.getClassID();
        if (!ret.deviceInfo.deviceId)
            ret.deviceInfo.deviceId = this.storage.loadDeviceId();
        if (!ret.deviceInfo.deviceName)
            ret.deviceInfo.deviceName = this.storage.loadDeviceName();
        if (!ret.deviceInfo.osInfo)
            ret.deviceInfo.osInfo = this.storage.loadOsString();
        if (!ret.start)
            ret.start = Date.now();
        return ret;
    }
    getMessage() {
        return [
            { name: 'type', value: 'sendBrowserEvent' },
            {
                name: 'sendBrowserEventMessage',
                value: this.messageQueue.shift()
            }
        ];
    }
    async postWebHistory(webHistoryData) {
        if (!this.classChannel) {
            logger.logWarning(`WebHistory.postWebHistory(): No classChannel`);
            return;
        }
        if (this.classChannel.getWebHistoryEnabled() !== true) {
            logger.logMessage(`WebHistory.postWebHistory(): Web history not enabled`);
            return;
        }
        if (!(webHistoryData === null || webHistoryData === void 0 ? void 0 : webHistoryData.url) || webHistoryData.url === '' || filterUrls.includes(webHistoryData.url)) {
            logger.logMessage(`WebHistory.postWebHistory(): useless url was filtered, url: ${webHistoryData === null || webHistoryData === void 0 ? void 0 : webHistoryData.url}`);
            return;
        }
        const completedMessage = await this.addMissingData(webHistoryData);
        this.messageQueue.push(completedMessage);
        this.socketController.postMessageFromFactory(this);
    }
}
exports.WebHistory = WebHistory;
//# sourceMappingURL=webHistory.js.map