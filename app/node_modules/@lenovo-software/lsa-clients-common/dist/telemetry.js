"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Telemetry = void 0;
// For lsa-common-client
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const defs_1 = require("./js/defs");
const internal_1 = require("./internal");
const intelliTaskInfo_1 = require("./intelliTaskInfo");
const logger = new internal_1.LoggerInterop();
/**
 * Common class for sending telemetry info
 */
class Telemetry {
    constructor(param) {
        var _a;
        this.TELEMETRY_INCLUDE_THUMBNAIL = 0x1;
        this.TELEMETRY_INCLUDE_BATTERY = 0x2;
        this.TELEMETRY_INCLUDE_WEBSITE = 0x4;
        this.TELEMETRY_INCLUDE_RUNNING_APPS = 0x8;
        this.MIN_TELEMETRY_REQUEST_SPACING = 500;
        this.MAX_TELEMETRY_SEND_FUDGE_FACTOR = 250;
        this.lastTelemetryRequestReceived = 0;
        this.messageSendPeriod = 0;
        this.lastTelemetrySent = 0;
        this.telemetryIncludeFlags = 0;
        this.thumbnailSource = '';
        this.thumbnailDesiredWidth = 0;
        this.thumbnailDesiredHeight = 0;
        this.thumbnailFormatPref = [];
        this.conferenceAttendeeId = '';
        this.pollingHandle = null;
        this.telemetrySendInProgress = false;
        this.instrumentationGatheringTime = 0;
        this.intelliTaskInfo = null;
        var self = this;
        if (param.mainPageStudent)
            this.student = param.mainPageStudent;
        else
            this.student = undefined;
        if (param.sioMsg)
            this.sioMsg = param.sioMsg;
        else
            this.sioMsg = undefined;
        if (param.currentTabs)
            this.currentTabs = param.currentTabs;
        else
            this.currentTabs = undefined;
        if (param.screenCapture)
            this.screenCapture = param.screenCapture;
        else
            this.screenCapture = undefined;
        if (param.runningAppsInstrumentation)
            this.runningApps = param.runningAppsInstrumentation;
        else
            this.runningApps = undefined;
        if (param.dateImpl)
            this.dateImplementation = param.dateImpl;
        else
            this.dateImplementation = Date;
        this.initTelemetryParams();
        pubsub_js_1.default.subscribe('onTelemetryRequest', (msg, data) => {
            self.handleTelemetryRequest(data);
        });
        pubsub_js_1.default.subscribe('onNewThumbnail', async () => {
            await self.sendTelemetry({
                purpose: 'New Thumbnail'
            });
        });
        pubsub_js_1.default.subscribe('onLeaveClassPostProcess', () => {
            self.clearTelemetryIntervalTimers();
            self.initTelemetryParams();
        });
        pubsub_js_1.default.subscribe('onHeartbeatTimeout', () => {
            self.clearTelemetryIntervalTimers();
            self.initTelemetryParams();
        });
        pubsub_js_1.default.subscribe('onConnectionStateChange', (msg, data) => {
            logger.logMessage('Telemetry received connection state change: ' + JSON.stringify(data));
            if (data && data.connected != defs_1.ConnectionStateEnum.Connected) {
                self.clearTelemetryIntervalTimers();
                self.initTelemetryParams();
            }
        });
        pubsub_js_1.default.subscribe('onConferenceAttendeeId', (msg, data) => {
            if ('attendeeId' in data) {
                this.conferenceAttendeeId = data.attendeeId;
            }
            else {
                logger.logError('Telemetry.onConferenceAttendeeId: Missing attendeeId');
            }
        });
        (_a = this.sioMsg) === null || _a === void 0 ? void 0 : _a.setLeaveClassCallback(() => {
            return new Promise((resolve) => {
                if (self.intelliTaskInfo) {
                    self.intelliTaskInfo.sendIntellitaskMetrics();
                    // give plenty of time for the metric message to go through
                    setTimeout(() => {
                        resolve();
                    }, 1000);
                }
                else {
                    resolve();
                }
            });
        });
    }
    initTelemetryParams() {
        var _a;
        this.lastTelemetryRequestReceived = 0;
        this.messageSendPeriod = 0;
        this.lastTelemetrySent = 0;
        this.telemetryIncludeFlags = 0;
        this.thumbnailSource = '';
        this.thumbnailDesiredWidth = 0;
        this.thumbnailDesiredHeight = 0;
        this.thumbnailFormatPref = [];
        this.instrumentationGatheringTime = 0;
        (_a = this.intelliTaskInfo) === null || _a === void 0 ? void 0 : _a.initIntelliTaskInfoParams();
    }
    sanitizeTelemetryRequest(data) {
        if (!data) {
            throw new Error('Telemetry.sanitizeTelemetryRequest(): Missing data parameter.');
        }
        const ret = Object.assign({}, data);
        if (!ret.telemetryMessage) {
            throw new Error('Telemetry.sanitizeTelemetryRequest(): Missing telemetry message.');
        }
        if (!ret.telemetryMessage.sendThumbnails) {
            ret.telemetryMessage.sendThumbnails = false;
        }
        if (!ret.telemetryMessage.sendBattery) {
            ret.telemetryMessage.sendBattery = false;
        }
        if (!ret.telemetryMessage.sendCurrentApp) {
            ret.telemetryMessage.sendCurrentApp = false;
        }
        if (!ret.telemetryMessage.sendCurrentWebsite) {
            ret.telemetryMessage.sendCurrentWebsite = false;
        }
        if (!ret.telemetryMessage.sendRunningApps) {
            ret.telemetryMessage.sendRunningApps = false;
        }
        if (!ret.telemetryMessage.period) {
            ret.telemetryMessage.period = 10000;
        }
        if (ret.telemetryMessage.sendThumbnails &&
            !ret.telemetryMessage.thumbnail) {
            ret.telemetryMessage.thumbnail = undefined;
        }
        if (ret.telemetryMessage.thumbnail) {
            const defaultThumbnailDesiredHeight = 160;
            const defaultThumbnailDesiredWidth = 100;
            if (this.screenCapture && ret.telemetryMessage.thumbnail) {
                const format = this.screenCapture.decideFormat(ret.telemetryMessage.thumbnail.formatPref) || 'JPG';
                ret.telemetryMessage.thumbnail.formatPref = [format];
            }
            if (ret.telemetryMessage.thumbnail.hasOwnProperty('desiredSize')) {
                ret.telemetryMessage.thumbnail.desiredSize.width =
                    ret.telemetryMessage.thumbnail.desiredSize.width ||
                        defaultThumbnailDesiredWidth;
                ret.telemetryMessage.thumbnail.desiredSize.height =
                    ret.telemetryMessage.thumbnail.desiredSize.height ||
                        defaultThumbnailDesiredHeight;
            }
            else {
                ret.telemetryMessage.thumbnail.desiredSize.width =
                    defaultThumbnailDesiredWidth;
                ret.telemetryMessage.thumbnail.desiredSize.height =
                    defaultThumbnailDesiredHeight;
            }
            if (!ret.telemetryMessage.thumbnail.hasOwnProperty('source')) {
                ret.telemetryMessage.thumbnail.source = 'Active Tab';
            }
            if (this.student &&
                this.student.policy &&
                this.student.policy.full_screen_thumbnail) {
                ret.telemetryMessage.thumbnail.source = 'Full Screen';
            }
        }
        return ret;
    }
    telemetryRequestIsTheSameAsLast(telemetryRequest) {
        if (!telemetryRequest) {
            logger.logError('Telemetry.telemetryRequestIsTheSameAsLast(): Missing telemetry request.');
            return false;
        }
        if (telemetryRequest.sendBattery !==
            (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_BATTERY) > 0) {
            return false;
        }
        if (telemetryRequest.sendCurrentWebsite !==
            (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_WEBSITE) > 0) {
            return false;
        }
        if (telemetryRequest.sendThumbnails !==
            (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_THUMBNAIL) > 0) {
            return false;
        }
        if (telemetryRequest.sendRunningApplications !==
            (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_RUNNING_APPS) > 0) {
            return false;
        }
        if (telemetryRequest.sendThumbnails && !telemetryRequest.thumbnail) {
            logger.logError('Telemetry.telemetryRequestIsTheSameAsLast(): Thumbnail send but missing parameters.');
            return false;
        }
        return (this.thumbnailSource === telemetryRequest.thumbnail.source &&
            this.thumbnailDesiredHeight ===
                telemetryRequest.thumbnail.desiredSize.height &&
            this.thumbnailDesiredWidth ===
                telemetryRequest.thumbnail.desiredSize.width &&
            this.thumbnailFormatPref === telemetryRequest.thumbnail.formatPref);
    }
    async sanitizeAndHandleTelemetryRequest(data) {
        var _a, _b, _c, _d;
        const sanitizedRequest = this.sanitizeTelemetryRequest(data);
        let telemetryMsg = sanitizedRequest.telemetryMessage;
        if (this.telemetryRequestIsTheSameAsLast(telemetryMsg)) {
            logger.logWarning('Telemetry is the same as the last one. Ignoring');
            return;
        }
        this.telemetryIncludeFlags = 0;
        this.lastTelemetryRequestReceived = this.dateImplementation.now();
        this.messageSendPeriod = telemetryMsg.period || 5000;
        this.clearTelemetryIntervalTimers();
        if (telemetryMsg.sendBattery) {
            this.telemetryIncludeFlags |= this.TELEMETRY_INCLUDE_BATTERY;
            (_a = this.student) === null || _a === void 0 ? void 0 : _a.startPollingBattery();
        }
        else {
            (_b = this.student) === null || _b === void 0 ? void 0 : _b.stopPollingBattery();
        }
        if (telemetryMsg.sendCurrentWebsite) {
            this.telemetryIncludeFlags |= this.TELEMETRY_INCLUDE_WEBSITE;
        }
        if (telemetryMsg.sendThumbnails) {
            if (telemetryMsg.thumbnail) {
                this.telemetryIncludeFlags |= this.TELEMETRY_INCLUDE_THUMBNAIL;
                this.handleTelemetryThumbnailRequest(telemetryMsg.thumbnail);
            }
        }
        if (telemetryMsg.sendRunningApps) {
            this.telemetryIncludeFlags |= this.TELEMETRY_INCLUDE_RUNNING_APPS;
        }
        if (telemetryMsg.sendIntelliTaskInfo) {
            if (!this.intelliTaskInfo) {
                this.intelliTaskInfo = new intelliTaskInfo_1.IntelliTaskInfo({
                    sioMsg: this.sioMsg
                });
            }
            internal_1.store.dispatch({ type: 'CaptureMode', payload: (_c = telemetryMsg.thumbnail) === null || _c === void 0 ? void 0 : _c.source });
            this.intelliTaskInfo.messageSendIntelliTaskInfoPeriodMs = telemetryMsg.intelliTaskInfoPeriod || 7000;
            if (telemetryMsg.intelliTaskSpecialSites) {
                internal_1.store.dispatch({ type: 'IntelliTaskSpecialSites', payload: telemetryMsg.intelliTaskSpecialSites });
                await ((_d = internal_1.LSAClient.getInstance().otmBrowserInstrumentation) === null || _d === void 0 ? void 0 : _d.updateSpecialSites());
            }
            await this.intelliTaskInfo.sendIntelliTaskInfo({ purpose: 'New Telemetry Request' });
        }
        else if (this.intelliTaskInfo) {
            this.intelliTaskInfo.doCleanup();
            this.intelliTaskInfo.sendIntellitaskMetrics();
            this.intelliTaskInfo = null;
        }
        await this.sendTelemetry({ purpose: 'New Telemetry Request' });
    }
    async handleTelemetryRequest(data) {
        logger.logMessage('Received telemetry: ' + JSON.stringify(data));
        if (!data.telemetryMessage)
            return;
        if (this.dateImplementation.now() <
            this.lastTelemetryRequestReceived +
                this.MIN_TELEMETRY_REQUEST_SPACING) {
            logger.logWarning('Telemetry request too close to the last one. Ignoring');
            return;
        }
        try {
            await this.sanitizeAndHandleTelemetryRequest(data);
        }
        catch (err) {
            logger.logError('Exception handling telemetry request: ' + err);
        }
    }
    _shouldForceSendTelemetry(param) {
        return param && param.purpose &&
            (param.purpose === 'New Thumbnail' || param.purpose === 'New Telemetry Request');
    }
    _shouldSendTelemetry(param) {
        if (this._shouldForceSendTelemetry(param)) {
            logger.logMessage('Forcing telemetry to be sent.');
            return true;
        }
        let rn = this.dateImplementation.now();
        if (rn <
            this.lastTelemetrySent +
                this.messageSendPeriod -
                this.MAX_TELEMETRY_SEND_FUDGE_FACTOR) {
            let timeDiff = rn - this.lastTelemetrySent;
            logger.logDebug('Not sending telemetry because telemetry already sent within ' +
                this.messageSendPeriod +
                'ms ago: ' +
                timeDiff);
            return false;
        }
        else {
            logger.logDebug('Telemetry last sent ' +
                (rn - this.lastTelemetrySent) +
                'ms ago');
        }
        return true;
    }
    stopTelemetryPolling() {
        if (this.pollingHandle) {
            clearTimeout(this.pollingHandle);
            this.pollingHandle = null;
        }
    }
    callTelemetryAgainLater(param) {
        this.stopTelemetryPolling();
        if (this.messageSendPeriod <= 0)
            return;
        let timeoutPeriod = this.messageSendPeriod - this.instrumentationGatheringTime;
        if (timeoutPeriod < 0)
            timeoutPeriod = this.messageSendPeriod;
        this.pollingHandle = setTimeout(async () => {
            await this.sendTelemetry(param);
        }, timeoutPeriod);
    }
    async gatherAllTelemetry() {
        var _a, _b, _c;
        let stopWatch = 0;
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_THUMBNAIL) {
            const stopWatchStart = this.dateImplementation.now();
            let stopWatchEnd;
            try {
                await ((_a = this.screenCapture) === null || _a === void 0 ? void 0 : _a.callInstrumentation());
            }
            catch (e) {
                logger.logError('Error gathering thumbnail: ' + JSON.stringify(e));
            }
            finally {
                stopWatchEnd = this.dateImplementation.now();
                stopWatch += stopWatchEnd - stopWatchStart;
            }
        }
        // We don't gather battery here. It's polled 1x/minute and that's enough accuracy.
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_WEBSITE) {
            const stopWatchStart = this.dateImplementation.now();
            let stopWatchEnd;
            try {
                await ((_b = this.currentTabs) === null || _b === void 0 ? void 0 : _b.callInstrumentation());
            }
            catch (e) {
                logger.logError('Error gathering tabs: ' + JSON.stringify(e));
            }
            finally {
                stopWatchEnd = this.dateImplementation.now();
                stopWatch += stopWatchEnd - stopWatchStart;
            }
        }
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_RUNNING_APPS) {
            const stopWatchStart = this.dateImplementation.now();
            let stopWatchEnd;
            try {
                await ((_c = this.runningApps) === null || _c === void 0 ? void 0 : _c.callInstrumentation());
            }
            catch (e) {
                logger.logError('Error gathering running apps: ' + JSON.stringify(e));
            }
            finally {
                stopWatchEnd = this.dateImplementation.now();
                stopWatch += stopWatchEnd - stopWatchStart;
            }
        }
        this.instrumentationGatheringTime = stopWatch;
    }
    async createTelemetryRequest() {
        var _a, _b, _c;
        const request = {
            activeTabFailure: false,
            waitingForFullScreenPermission: false
        };
        await this.gatherAllTelemetry();
        logger.logMessage('instrumentationGatheringTime: ' + this.instrumentationGatheringTime);
        // Thumbnail
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_THUMBNAIL) {
            if (this.screenCapture &&
                !this.screenCapture.thumbnailOK &&
                (this.screenCapture.currentThumbnailImageSourceIsActiveTab() ||
                    this.thumbnailSource === 'Active Tab')) {
                request.activeTabFailure = true;
            }
            else if (this.student &&
                this.student.isStudentInShowTeacherMode &&
                this.student.isStudentInShowTeacherMode()) {
                // TODO: send up a more accurate flag for this.
                request.activeTabFailure = true;
            }
            else if (this.screenCapture &&
                this.screenCapture.thumbnailObj &&
                this.screenCapture.thumbnailObj.image) {
                request.thumbnail = this.screenCapture.thumbnailObj;
            }
            if (this.student &&
                this.student.isStudentWaitingForFullScreenPermission) {
                if (this.student.isStudentWaitingForFullScreenPermission()) {
                    request.waitingForFullScreenPermission = true;
                    logger.logMessage('waiting for full screen permission from user...');
                }
            }
        }
        // Battery
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_BATTERY) {
            if ((_a = this.student) === null || _a === void 0 ? void 0 : _a.battery) {
                request.battery = this.toBatteryInfo(this.student.battery);
            }
            else {
                logger.logMessage('this.student does not contain battery information.');
            }
        }
        // Current website
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_WEBSITE) {
            if (this.student && this.student.lastURL) {
                request.currentWebsite = this.student.lastURL;
            }
            // Current tabs
            if (this.currentTabs) {
                let clientSupportsSendingBrowserTabsToTelemetry = false;
                try {
                    clientSupportsSendingBrowserTabsToTelemetry = (_b = this.currentTabs) === null || _b === void 0 ? void 0 : _b.supportsBrowserTabsToTelemetry();
                }
                catch (e) {
                    logger.logError('createTelemetryRequest error in supportsBrowserTabsToTelemetry: ' + e);
                }
                if (clientSupportsSendingBrowserTabsToTelemetry) {
                    request.browserWindows = this.currentTabs.tabs;
                }
            }
        }
        if (this.telemetryIncludeFlags & this.TELEMETRY_INCLUDE_RUNNING_APPS) {
            if (this.runningApps) {
                request.runningApps = this.runningApps.runningApps;
            }
        }
        // Conference attendee ID
        if (((_c = this.conferenceAttendeeId) === null || _c === void 0 ? void 0 : _c.length) > 0) {
            request.attendeeId = this.conferenceAttendeeId;
        }
        return request;
    }
    async sendTelemetry(param) {
        var _a;
        this.stopTelemetryPolling();
        if (this.telemetrySendInProgress || !this._shouldSendTelemetry(param)) {
            this.callTelemetryAgainLater(param);
            return;
        }
        this.telemetrySendInProgress = true;
        try {
            logger.logMessage('(+) sendTelemetry');
            const request = await this.createTelemetryRequest();
            this.lastTelemetrySent = this.dateImplementation.now();
            (_a = this.sioMsg) === null || _a === void 0 ? void 0 : _a.postTelemetryMessage(request);
        }
        catch (e) {
            logger.logError('sendTelemetry error: ' + JSON.stringify(e));
        }
        finally {
            this.telemetrySendInProgress = false;
            this.callTelemetryAgainLater(param);
        }
    }
    clearTelemetryIntervalTimers() {
        this.stopTelemetryPolling();
    }
    handleTelemetryThumbnailRequest(thumbnailReq) {
        var _a, _b, _c, _d, _e;
        if (!this.screenCapture) {
            throw new Error('Telemetry: No screenCapture object defined.');
        }
        this.thumbnailSource = (_a = thumbnailReq.source) !== null && _a !== void 0 ? _a : '';
        this.thumbnailDesiredHeight = (_c = (_b = thumbnailReq.desiredSize) === null || _b === void 0 ? void 0 : _b.height) !== null && _c !== void 0 ? _c : 0;
        this.thumbnailDesiredWidth = (_e = (_d = thumbnailReq.desiredSize) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : 0;
        this.thumbnailFormatPref = thumbnailReq.formatPref;
        logger.logMessage('handleTelemetryThumbnailRequest: (' +
            this.thumbnailDesiredWidth +
            ' x ' +
            this.thumbnailDesiredHeight +
            '), format: ' +
            this.thumbnailFormatPref +
            ', source: ' +
            this.thumbnailSource);
        this.screenCapture.setThumbnailParams({
            width: this.thumbnailDesiredWidth,
            height: this.thumbnailDesiredHeight,
            format: this.thumbnailFormatPref,
            source: this.thumbnailSource
        });
    }
    /**
     * Converts BatteryStatus object to BatteryInfo and returns it
     */
    toBatteryInfo(batteryMgr) {
        const batteryObj = {
            charging: batteryMgr.charging,
            exists: batteryMgr.level,
            secondsRemaining: batteryMgr.dischargingTime,
            percentRemaining: batteryMgr.level * 100
        };
        return batteryObj;
    }
}
exports.Telemetry = Telemetry;
//# sourceMappingURL=telemetry.js.map