"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultStorage = exports.DefaultDeviceNamePrefix = exports.DefaultProvisioningCode = exports.DefaultAPIServer = void 0;
const defs_1 = require("../js/defs");
exports.DefaultAPIServer = 'api-lsa.lenovosoftware.com';
exports.DefaultProvisioningCode = defs_1.CatchAllOrg;
exports.DefaultDeviceNamePrefix = 'UnknownDevice_';
class DefaultStorage {
    constructor() {
        this.defaultDeviceName = '';
    }
    loadProvisioningData() {
        throw new Error('Method not implemented.');
    }
    saveProvisioningData(data) {
        throw new Error('Method not implemented.');
    }
    loadProvisioningParams() {
        throw new Error('Method not implemented.');
    }
    saveProvisioningParams(data) {
        throw new Error('Method not implemented.');
    }
    loadToken() {
        throw new Error('Method not implemented.');
    }
    saveToken(data) {
        throw new Error('Method not implemented.');
    }
    loadPrivateKey() {
        return '';
    }
    savePrivateKey(data) {
        throw new Error('Method not implemented.');
    }
    loadPublicKey() {
        return '';
    }
    savePublicKey(data) {
        throw new Error('Method not implemented.');
    }
    loadAPIServer() {
        return exports.DefaultAPIServer;
    }
    loadHotProvisioningCode() {
        return '';
    }
    saveHotProvisioningCode(hotProvisioningCode) {
        throw new Error('Method not implemented.');
    }
    loadProvisioningCode() {
        return exports.DefaultProvisioningCode;
    }
    saveProvisioningCode(provisioningCode) {
        throw new Error('Method not implemented.');
    }
    loadDeviceName() {
        if (this.defaultDeviceName.length === 0) {
            this.defaultDeviceName = exports.DefaultDeviceNamePrefix;
            this.defaultDeviceName += Math.floor(Math.random() * 1000000000);
        }
        return this.defaultDeviceName;
    }
    loadEmailAddr() {
        return '';
    }
    loadDeviceId() {
        return '';
    }
    loadDeviceType() {
        return '';
    }
    loadOsString() {
        return '';
    }
    loadDisplayName() {
        return '';
    }
    loadLoginName() {
        return '';
    }
    forceReprovision() {
        return false;
    }
    saveForceReprovision(force) {
        return '';
    }
    getClientVersion() {
        return '';
    }
    loadOsVersion() {
        return '';
    }
}
exports.DefaultStorage = DefaultStorage;
//# sourceMappingURL=defaultStorage.js.map