"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeadOrgNotificationDialog = void 0;
const i18nController_1 = require("../i18n/controller/i18nController");
class DeadOrgNotificationDialog {
    constructor(lsaClient, logger) {
        this.lsaClient = lsaClient;
        this.logger = logger;
        this.initialWindowWidthPx = 650;
        this.initialWindowHeightPx = 185;
        this.windowSize = {
            x: this.initialWindowWidthPx,
            y: this.initialWindowHeightPx
        };
        if (!this.lsaClient.routableWindowFactory)
            throw new Error(`DeadOrgNotificationDialog.ctor(): No implementation found for RoutableWindowFactory.`);
        this.routableWindow = this.lsaClient.routableWindowFactory.getNewRoutableWindow(logger);
    }
    async close() {
        var _a, _b;
        await ((_a = this.routableWindow) === null || _a === void 0 ? void 0 : _a.close());
        await ((_b = this.routableWindow) === null || _b === void 0 ? void 0 : _b.destroy());
    }
    async onMessage(message, data) {
        var _a;
        if ((data === null || data === void 0 ? void 0 : data.windowId) !== DeadOrgNotificationDialog.windowId)
            return Promise.reject(`DeadOrgNotificationDialog.onMessage: data.route '${data.route}' route does not match '${DeadOrgNotificationDialog.leafRoute}'.`);
        if (message === 'FromUI_CloseWindow' || message === DeadOrgNotificationDialog.viewTitlebarCloseControl.message) {
            try {
                await this.close();
            }
            catch (e) {
                this.logger.logError(`DeadOrgNotificationDialog.onMessage: Error processing ${message}: ${e.message}`);
            }
            return Promise.resolve();
        }
        else if (message === 'FromUI_ElementSizeNotification' && data.height && this.routableWindow) {
            // This message is sent by the UI window to relay the size of the control being rendered (without the titlebar.)
            // Handling this message allows the windowing system to resize the window accounting for the control and titlebar
            // sizes.
            try {
                let bounds = await this.routableWindow.getCurrentWindowBounds();
                let titlebarHeight = await this.routableWindow.getTitlebarHeightInPx() || 0;
                bounds.size.y = titlebarHeight + data.height;
                await ((_a = this.routableWindow) === null || _a === void 0 ? void 0 : _a.resize(bounds));
            }
            catch (e) {
                this.logger.logError(`DeadOrgNotificationDialog.onMessage: Error processing ${message}: ${e.message}`);
            }
            return Promise.resolve();
        }
        return Promise.reject(`DeadOrgNotification.onMessage: message ${message} has no handler.`);
    }
    async launch() {
        var _a, _b, _c;
        try {
            await ((_a = this.routableWindow) === null || _a === void 0 ? void 0 : _a.init({
                windowId: DeadOrgNotificationDialog.windowId,
                leafRoute: DeadOrgNotificationDialog.leafRoute,
                titlebar: {
                    hasTitlebar: true,
                    titlebarTitle: i18nController_1.i18nController.getMessage('dead_org_titlebar_title'),
                    displayTitle: true,
                    canMoveWindow: true,
                    backgroundColor: '#aaacac',
                    foregroundColor: '#ffffff',
                    controlOptions: [DeadOrgNotificationDialog.viewTitlebarCloseControl]
                },
                resizable: false,
                me: this
            }));
            const screenResolution = await ((_b = this.lsaClient.screenInfo) === null || _b === void 0 ? void 0 : _b.getScreenResolution()) || { x: 1280, y: 1024 };
            await ((_c = this.routableWindow) === null || _c === void 0 ? void 0 : _c.show({
                top: screenResolution.y / 2 - (this.windowSize.y / 2),
                left: screenResolution.x / 2 - (this.windowSize.x / 2),
                size: this.windowSize
            }));
        }
        catch (e) {
            this.logger.logError(`DeadOrgNotificationDialog.launch(): Error launching routableWindow for ${DeadOrgNotificationDialog.leafRoute}.`);
        }
    }
}
exports.DeadOrgNotificationDialog = DeadOrgNotificationDialog;
DeadOrgNotificationDialog.leafRoute = 'dead-org-notify';
DeadOrgNotificationDialog.windowId = 'DeadOrgNotificationDialog';
DeadOrgNotificationDialog.viewTitlebarCloseControl = {
    controlOption: 'close',
    message: 'NgViewClose'
};
DeadOrgNotificationDialog.viewTitlebarMinimizeControl = {
    controlOption: 'minimize',
    message: 'NgViewMinimize'
};
DeadOrgNotificationDialog.viewTitlebarMaximizeControl = {
    controlOption: 'maximize',
    message: 'NgViewMaximize'
};
//# sourceMappingURL=deadOrgNotificationDialog.js.map