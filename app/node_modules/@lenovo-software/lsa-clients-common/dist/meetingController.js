"use strict";
// Copyright Â© 2024 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetingController = void 0;
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("./internal");
const defs_1 = require("./js/defs");
const meetingDataRetriever_1 = require("./meetingDataRetriever");
const logger = new internal_1.LoggerInterop();
const FullScreenShowTeacherPriority = 100;
class MeetingController {
    constructor(params) {
        this.classId = '';
        this.apiServer = '';
        this.meetingStarted = false;
        this.meetingNeedsRestart = false;
        this.isMeetingFullScreen = false;
        this.isStoppingMeeting = false;
        this.lsaClient = internal_1.LSAClient.getInstance();
        this.apiServer = params.apiServerForHTTPS;
        this.meetingDataRetriever = new meetingDataRetriever_1.MeetingDataRetriever({
            apiServer: params.apiServerForHTTPS,
            deviceId: params.deviceId,
            provisioningCode: params.provisioningCode
        });
        pubsub_js_1.default.subscribe('onJoinClass', (msg, data) => {
            if (!data.classID)
                return;
            if (this.classId.length > 0) {
                // We are already in a class...
                if (data.classID !== this.classId) {
                    // But we are joining a different class so dump the current meeting
                    logger.logMessage('MeetingController.onJoinClass: Ending current meeting...');
                    this.endAllConferencing();
                }
            }
            this.classId = data.classID;
            logger.logMessage('MeetingController.onJoinClass: classId: ' + this.classId);
        });
        pubsub_js_1.default.subscribe('onChimeScreenShareStarted', (msg, data) => {
            this.startMeeting(data, defs_1.TEACHER_CONFERENCE_TYPE_VIDEO);
        });
        pubsub_js_1.default.subscribe('onConnectionStateChange', (msg, data) => {
            if (data.connected != defs_1.ConnectionStateEnum.Connected) {
                logger.logMessage('MeetingController.onConnectionStateChange: Detected disconnect - quitting meeting...');
                this.endAllConferencing();
            }
        });
        pubsub_js_1.default.subscribe('onLeaveClass', (msg, data) => {
            logger.logMessage('MeetingController.onLeaveClass - quitting meeting...');
            this.classId = '';
            this.endAllConferencing();
        });
        pubsub_js_1.default.subscribe('onHeartbeatTimeout', (msg, data) => {
            this.endAllConferencing();
        });
        pubsub_js_1.default.subscribe('onChatWindowOpen', (msg, data) => {
            logger.logMessage('MeetingController.onChatWindowOpen: Viewer ready.');
            if (this.meetingNeedsRestart) {
                this.meetingNeedsRestart = false;
                logger.logMessage('MeetingController.onChatWindowOpen: Restarting video...');
                this.startMeeting(this.meetingConfig, defs_1.TEACHER_CONFERENCE_TYPE_VIDEO);
            }
        });
        pubsub_js_1.default.subscribe('onUnexpectedChatWindowClose', (msg, data) => {
            logger.logMessage('MeetingController.onUnexpectedChatWindowClose: Viewer gone!');
            if (this.meetingStarted) {
                logger.logMessage('MeetingController.onUnexpectedChatWindowClose: Setting meetingNeedsRestart = true');
                this.meetingNeedsRestart = true;
            }
        });
        pubsub_js_1.default.subscribe('EndMediaBroadcast', (msg, data) => {
            this.isStoppingMeeting = true;
            this.meetingStarted = false;
            this.meetingNeedsRestart = false;
            this.dispatchEndMediaBroadcast();
        });
        pubsub_js_1.default.subscribe('onUnexpectedConferenceWindowClose', (msg, data) => {
            if (this.isMeetingFullScreen) {
                internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
            }
        });
        pubsub_js_1.default.subscribe('onMeetingEnded', (msg, data) => {
            logger.logMessage('MeetingController.onMeetingEnded');
            this.endAllConferencing();
        });
    }
    endAllConferencing() {
        this.meetingStarted = false;
        this.meetingNeedsRestart = false;
        this.isMeetingFullScreen = false;
        this.endMeeting(defs_1.TEACHER_CONFERENCE_TYPE_VIDEO);
    }
    removeMeetingType(meetingType) {
        var _a;
        logger.logInfo('MeetingController.removeMeetingType(+)');
        logger.logDebug('MeetingController.removeMeetingType: meetingType: ' + meetingType + ', conferenceData: ' + JSON.stringify(this.conferenceData));
        if (((_a = this.conferenceData) === null || _a === void 0 ? void 0 : _a.conferenceType) &&
            !!(this.conferenceData.conferenceType & meetingType)) {
            this.conferenceData.conferenceType ^= meetingType;
        }
    }
    dispatchChimeBeginMediaBroadcast() {
        var _a;
        const chimeConfig = {
            apiServer: this.apiServer,
            classId: this.classId,
            conferenceData: this.conferenceData,
            meetingConfig: this.meetingConfig
        };
        this.lsaClient.logger.logInfo('MeetingController.dispatchChimeBeginMediaBroadcast(+) ' + JSON.stringify(chimeConfig));
        const meetingModel = internal_1.MeetingDirectiveModel.fromAny(chimeConfig);
        this.lsaClient.logger.logDebug('MeetingDirectiveModel data: ' + JSON.stringify(meetingModel));
        if (meetingModel.windowed === true) {
            internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
            (_a = this.lsaClient.meetingDirectiveHandler) === null || _a === void 0 ? void 0 : _a.createMeetingSession(meetingModel);
        }
        else {
            // Full screen requested
            internal_1.FullScreenActivityDirector.getInstance().queueActivity(FullScreenShowTeacherPriority, this, meetingModel);
        }
    }
    async startFullScreenActivity(parameters) {
        var _a;
        this.lsaClient.logger.logInfo('MeetingController.startFullScreenActivity(+)');
        await ((_a = this.lsaClient.meetingDirectiveHandler) === null || _a === void 0 ? void 0 : _a.createMeetingSession(parameters));
        this.isMeetingFullScreen = !(parameters.windowed);
    }
    async stopFullScreenActivity(parameters) {
        var _a;
        this.lsaClient.logger.logInfo('MeetingController.stopFullScreenActivity(+) isStoppingMeeting = ' + this.isStoppingMeeting);
        if (this.isStoppingMeeting === false) {
            // We only want to set ourselves to windowed if we are currently full screen
            // and the meeting is not in the process of ending.
            const copy = internal_1.MeetingDirectiveModel.fromAny(parameters);
            copy.windowed = true;
            await ((_a = this.lsaClient.meetingDirectiveHandler) === null || _a === void 0 ? void 0 : _a.createMeetingSession(copy));
        }
        this.isMeetingFullScreen = false;
    }
    dispatchEndMediaBroadcast() {
        this.lsaClient.logger.logInfo('MeetingController.dispatchEndMediaBroadcast(+)');
        internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
    }
    notifyEndMediaBroadcast() {
        logger.logMessage('MeetingController.notifyEndMediaBroadcast(+)');
        pubsub_js_1.default.publish('EndMediaBroadcast');
    }
    async startMeeting(meetingConfig, meetingType) {
        const isViewingMeeting = !!(meetingType & defs_1.TEACHER_CONFERENCE_TYPE_VIDEO);
        const typeLog = isViewingMeeting ? 'Viewing' : 'ScreenBroadcast';
        logger.logMessage('MeetingController.startMeeting(+): Starting ' + typeLog + ' meeting');
        if (!meetingConfig) {
            logger.logError('MeetingController.startMeeting(): meetingConfig parameter is missing.');
            return;
        }
        this.meetingConfig = meetingConfig;
        try {
            const oauthToken = await this.meetingDataRetriever.getOAuthToken();
            this.conferenceData = { oauthToken, conferenceType: meetingType };
        }
        catch (err) {
            logger.logError('MeetingController.startMeeting(): oauthToken is missing.');
            return;
        }
        this.isStoppingMeeting = false;
        this.dispatchChimeBeginMediaBroadcast();
        this.meetingStarted = true;
        const conferenceState = {
            mode: 'Start',
            type: isViewingMeeting ? 'Video' : 'Screen'
        };
        if (isViewingMeeting) {
            conferenceState.view = meetingConfig.windowed ? 'Window' : 'Full Screen';
        }
        pubsub_js_1.default.publish('onConferenceState', conferenceState);
    }
    endMeeting(meetingType) {
        this.isStoppingMeeting = true;
        const isViewingMeeting = !!(meetingType & defs_1.TEACHER_CONFERENCE_TYPE_VIDEO);
        const typeLog = isViewingMeeting ? 'Viewing' : '';
        logger.logMessage('MeetingController.endMeeting(+): Ending ' + typeLog + ' meeting...');
        this.removeMeetingType(meetingType);
        pubsub_js_1.default.publish('onConferenceState', {
            mode: 'End',
            type: isViewingMeeting ? 'Video' : 'Screen'
        });
        if (isViewingMeeting) {
            this.notifyEndMediaBroadcast();
        }
    }
}
exports.MeetingController = MeetingController;
//# sourceMappingURL=meetingController.js.map