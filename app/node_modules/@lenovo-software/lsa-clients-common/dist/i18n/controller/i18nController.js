"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.i18nController = void 0;
const config_1 = require("../configs/config");
const i18next_config_1 = require("../configs/i18next.config");
const locale_mapper_1 = require("../mapper/locale.mapper");
const internal_1 = require("../../internal");
class i18nController {
    static async init(locale) {
        this._locale = locale;
        if (!i18next_config_1.i18next.isInitialized) {
            // this is required before requesting translation
            // logger.logInfo('+++++++++++ await i18next.ini');
            // return
            await i18next_config_1.i18next.init(i18next_config_1.i18nextOptions);
        }
        return Promise.resolve(() => { });
    }
    // on language change, call this method to update locale
    static setLocale(locale) {
        this._locale = locale;
        this.isCacheValid = false;
    }
    /**
     * This method handles system related i18n messages
     * @param key property name
     * @returns Returns translated string
     */
    static getMessage(key) {
        // cache translation object based on currently set language
        try {
            if (!this.isCacheValid) {
                const langCode = (0, locale_mapper_1.i18nLocaleMapper)(this._locale);
                this.i18nMessageBundle = i18next_config_1.i18next === null || i18next_config_1.i18next === void 0 ? void 0 : i18next_config_1.i18next.getResourceBundle(langCode, config_1.i18nCommonConfig.namespace);
                this.isCacheValid = true;
            }
            if (this.i18nMessageBundle &&
                this.i18nMessageBundle.messages.hasOwnProperty(key)) {
                return this.i18nMessageBundle.messages[key].message;
            }
        }
        catch (e) {
            internal_1.LSAClient.getInstance().logger.logError('getMessage exception: ' + e);
        }
        return key;
    }
}
exports.i18nController = i18nController;
i18nController._locale = config_1.i18nCommonConfig.fallbackLng;
i18nController.isCacheValid = false;
//# sourceMappingURL=i18nController.js.map