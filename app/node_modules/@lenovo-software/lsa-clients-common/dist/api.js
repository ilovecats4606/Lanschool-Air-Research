"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = exports.post = exports.getFetchHeaderObj = void 0;
const internal_1 = require("./internal");
function getFetchHeaderObj(verb) {
    let retObj = {
        method: verb
    };
    let xLSAAgentHeader = '';
    try {
        xLSAAgentHeader = internal_1.LSAClient.getInstance().getAgentVersionHeaderString();
        if (xLSAAgentHeader.length > 0) {
            retObj['headers'] = {
                'X-LSA-Agent': xLSAAgentHeader
            };
        }
    }
    catch (e) {
        internal_1.LSAClient.getInstance().logger.logError('getFetchHeaderObj exception: ' + e);
    }
    return retObj;
}
exports.getFetchHeaderObj = getFetchHeaderObj;
/**
 * Fetch API POST method call
 * @param url API url
 * @param data JSON string data to pass to the api in body
 * @returns
 */
async function post(url, data, token) {
    const postHeader = getFetchHeaderObj('POST');
    postHeader['headers']['content-type'] = 'application/json;charset=UTF-8';
    if (token)
        postHeader["headers"]['Authorization'] = token;
    if (data) {
        return fetch(url, Object.assign({ body: data }, postHeader));
    }
    return fetch(url, Object.assign({}, postHeader));
}
exports.post = post;
async function get(url, token) {
    const getHeader = getFetchHeaderObj('GET');
    if (token)
        getHeader["headers"]['Authorization'] = token;
    try {
        const response = await fetch(url, getHeader);
        const responseText = await response.text();
        if (response.status === 200) {
            try {
                const responseData = JSON.parse(responseText);
                if (responseData) {
                    return Promise.resolve({ data: responseData });
                }
                else {
                    return Promise.reject({ code: 500, message: 'Invalid response data' });
                }
            }
            catch (err) {
                internal_1.LSAClient.getInstance().logger.logError('get() exception: ' + err);
                return Promise.reject({ code: 500, message: 'Invalid response data' });
            }
        }
        else if (response.status === 401) {
            return Promise.reject({ code: 401, message: 'Unauthorized' });
        }
        else {
            return Promise.reject({ code: response.status, message: 'Server Error' });
        }
    }
    catch (error) {
        internal_1.LSAClient.getInstance().logger.logError('get() exception2: ' + error);
        return Promise.reject({ code: 0, message: 'Error in fetch: ' + error });
    }
}
exports.get = get;
//# sourceMappingURL=api.js.map