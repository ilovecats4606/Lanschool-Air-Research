"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubscribers = exports.schedulerTimeout = void 0;
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("./internal");
exports.schedulerTimeout = 100;
class EventSubscribers {
    constructor() {
        this.genericEventHandler = null;
        this.connectivityEventHandler = null;
        this.registrationEventHandler = null;
        this.classroomEventHandler = null;
        this.supportedMessages = [
            'onProvisionStatus',
            'onTokenStatus',
            'onLeaveClass',
            'onLeaveClassPostProcess',
            'onCatchAllProvisioning',
            'onJoinClassPostProcess',
            'onConnectionStateChange',
            'onIPAddressDenial',
            'onPayloadVerificationFailure',
            'onJoinClass',
            'onStopMonitoring',
            'onPublicKeyReceived',
            'onTelemetryRequest',
            'onLimitState',
            'onRemoteExecute',
            'onCurrentScreenRequest',
            'onHeartbeatReceived',
            'onChatReceived',
            'onDoNotDisturbReceived',
            'onClearRaiseHand',
            'onCloseTabsRequest',
            'onOrgVerification',
            'onActiveInstructorsInfo',
            'onCloseApp',
            'onAppHalt',
            'onProvisioningAttempted'
        ];
        for (let i = 0; i < this.supportedMessages.length; i++) {
            pubsub_js_1.default.subscribe(this.supportedMessages[i], (msg, data) => {
                this.dispatch(msg, data);
            });
        }
    }
    dispatchGeneric(msg, data) {
        if (!this.genericEventHandler) {
            return;
        }
        this.genericEventHandler.onEvent(msg, data);
    }
    dispatchConnectivity(msg, data) {
        if (!this.connectivityEventHandler) {
            return;
        }
        switch (msg) {
            case 'onConnectionStateChange': {
                this.connectivityEventHandler.onConnectionStateChange(internal_1.ConnectionStateChangeEventModel.fromAny(data));
                break;
            }
            case 'onIPAddressDenial': {
                this.connectivityEventHandler.onIPAddressDenial();
                break;
            }
        }
    }
    dispatchRegistration(msg, data) {
        if (!this.registrationEventHandler) {
            return;
        }
        switch (msg) {
            case 'onProvisionStatus': {
                this.registrationEventHandler.onProvisionedStatus(data.provisioned);
                break;
            }
            case 'onTokenStatus': {
                this.registrationEventHandler.onTokenStatus(data.validToken, data.error ? data.error : null);
                break;
            }
            case 'onCatchAllProvisioning': {
                this.registrationEventHandler.onCatchAllProvisioning();
                break;
            }
            case 'onAppHalt': {
                if (this.registrationEventHandler.onAppHalt)
                    this.registrationEventHandler.onAppHalt();
                break;
            }
            case 'onProvisioningAttempted': {
                try {
                    this.registrationEventHandler.onProvisioningAttempted();
                }
                catch (e) {
                    // client may not have implemented the Ex interface so silently catch this
                }
                break;
            }
        }
    }
    dispatchClassroom(msg, data) {
        if (!this.classroomEventHandler) {
            return;
        }
        switch (msg) {
            case 'onPayloadVerificationFailure': {
                this.classroomEventHandler.onPayloadVerificationFailure();
                break;
            }
            case 'onJoinClass': {
                this.classroomEventHandler.onJoinClass(internal_1.JoinClassEventModel.fromAny(data));
                break;
            }
            case 'onJoinClassPostProcess': {
                this.classroomEventHandler.onJoinClassPostProcess(internal_1.JoinClassEventModel.fromAny(data));
                break;
            }
            case 'onLeaveClass': {
                this.classroomEventHandler.onLeaveClass(internal_1.LeaveClassEventModel.fromAny(data));
                this.classroomEventHandler.onActiveInstructorsInfo(internal_1.ActiveInstructorsModel.fromArray([]));
                break;
            }
            case 'onLeaveClassPostProcess': {
                this.classroomEventHandler.onLeaveClassPostProcess(internal_1.LeaveClassEventModel.fromAny(data));
                break;
            }
            case 'onPublicKeyReceived': {
                this.classroomEventHandler.onPublicKeyReceivedFromTeacher(data);
                break;
            }
            case 'onTelemetryRequest': {
                this.classroomEventHandler.onTelemetryRequest(internal_1.TelemetryRequestEventModel.fromAny(data));
                break;
            }
            case 'onLimitState': {
                this.classroomEventHandler.onLimitState(internal_1.LimitingRequestEventModel.fromAny(data));
                break;
            }
            case 'onRemoteExecute': {
                this.classroomEventHandler.onRemoteExecute(internal_1.RemoteExecuteEventModel.fromAny(data));
                break;
            }
            case 'onCurrentScreenRequest': {
                this.classroomEventHandler.onCurrentScreenRequest(internal_1.CurrentScreenRequestEventModel.fromAny(data));
                break;
            }
            case 'onHeartbeatReceived': {
                this.classroomEventHandler.onHeartbeatReceived(internal_1.HeartbeatEventModel.fromAny(data));
                break;
            }
            case 'onChatReceived': {
                this.classroomEventHandler.onChatReceived(internal_1.ChatReceivedEventModel.fromAny(data));
                break;
            }
            case 'onDoNotDisturbReceived': {
                this.classroomEventHandler.onDoNotDisturbReceived(data.doNotDisturbMessage.on);
                break;
            }
            case 'onClearRaiseHand': {
                this.classroomEventHandler.onClearRaiseHand();
                break;
            }
            case 'onCloseTabsRequest': {
                this.classroomEventHandler.onCloseTabsRequest(internal_1.CloseTabsEventModel.fromAny(data));
                break;
            }
            case 'onOrgVerification': {
                if (data && data.hasOwnProperty('isVerified')) {
                    this.classroomEventHandler.onOrgVerification(data.isVerified);
                }
                break;
            }
            case 'onActiveInstructorsInfo': {
                if (data && data.hasOwnProperty('activeInstructors')) {
                    this.classroomEventHandler.onActiveInstructorsInfo(internal_1.ActiveInstructorsModel.fromArray(data.activeInstructors));
                }
                break;
            }
            case 'onCloseApp': {
                this.classroomEventHandler.onCloseApp(internal_1.CloseAppEventModel.fromAny(data));
                break;
            }
        }
    }
    dispatch(msg, data) {
        this.dispatchGeneric(msg, data);
        this.dispatchConnectivity(msg, data);
        this.dispatchRegistration(msg, data);
        this.dispatchClassroom(msg, data);
    }
}
exports.EventSubscribers = EventSubscribers;
//# sourceMappingURL=eventSubscriber.js.map