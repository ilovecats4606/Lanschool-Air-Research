"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequest = void 0;
const internal_1 = require("../../internal");
// Conflict resolution: export default class HttpRequest...
class HttpRequest {
    constructor(url, options) {
        this.url = url;
        this.options = options;
        const headerObj = internal_1.httpAPI.getFetchHeaderObj((options === null || options === void 0 ? void 0 : options.method) || 'GET');
        if (!options) {
            this.options = headerObj;
        }
        else {
            if (!headerObj.hasOwnProperty('headers'))
                return;
            if (!options['headers']) {
                this.options['headers'] = {};
            }
            for (const [key, value] of Object.entries(headerObj['headers'])) {
                this.options['headers'][key] = value;
            }
        }
    }
    async doRequest() {
        const response = await fetch(this.url, this.options);
        const responseObj = {
            status: response.status,
        };
        if (response.status === 200) {
            try {
                const jsonResponse = await response.json();
                responseObj.json = jsonResponse;
            }
            catch (err) {
                internal_1.LSAClient.getInstance().logger.logError('doRequest exception: ' + err);
                responseObj.json = undefined;
            }
        }
        return responseObj;
    }
}
exports.HttpRequest = HttpRequest;
//# sourceMappingURL=httpRequest.js.map