"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerInterop = void 0;
const internal_1 = require("../../internal");
// This class provides support for original JS client
class LoggerInterop {
    constructor() {
        this._logger = null;
    }
    get logger() {
        if (!this._logger || this._logger instanceof internal_1.DefaultLogger) {
            if (internal_1.LSAClient) {
                this._logger = internal_1.LSAClient.getInstance().logger;
            }
            else if (!this._logger) {
                this._logger = new internal_1.DefaultLogger();
            }
        }
        return this._logger;
    }
    logDebug(msg) {
        this.logger.logDebug(msg);
    }
    logInfo(msg) {
        this.logger.logInfo(msg);
    }
    logMessage(msg) {
        this.logger.logMessage(msg);
    }
    logWarning(msg) {
        this.logger.logWarning(msg);
    }
    logError(msg) {
        this.logger.logError(msg);
    }
    // Copied from original logger.js
    // Used by socketio_message.js
    timeStampMS(doMS) {
        // Create a date object with the current time
        const now = new Date();
        const date = [now.getMonth() + 1, now.getDate(), now.getFullYear()];
        const time = [now.getHours().toString(), now.getMinutes().toString(), now.getSeconds().toString()];
        // tslint:disable-next-line: variable-name
        const time_ms = now.getMilliseconds();
        // If seconds and minutes are less than 10, add a zero
        for (let i = 1; i < 3; i++) {
            if (Number(time[i]) < 10) {
                time[i] = '0' + time[i];
            }
        }
        // Return the formatted string
        let dateTime = date.join('/') + ' ' + time.join(':');
        if (doMS) {
            dateTime += '.' + time_ms;
        }
        return dateTime;
    }
}
exports.LoggerInterop = LoggerInterop;
//# sourceMappingURL=loggerInterop.js.map