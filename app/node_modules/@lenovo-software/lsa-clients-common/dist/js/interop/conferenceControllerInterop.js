"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConferenceControllerInterop = void 0;
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const internal_1 = require("../../internal");
const FullScreenShowTeacherPriority = 100;
class ConferenceControllerInterop {
    constructor(params) {
        this.isConferenceFullScreen = false;
        this.isStoppingConference = false;
        this.lsaClient = internal_1.LSAClient.getInstance();
        new internal_1.ConferenceController({
            apiServer: params.apiServerForHTTPS,
            webViewWindowController: 'UNUSED',
            deviceId: params.deviceId,
            provisioningCode: params.provisioningCode
        });
        pubsub_js_1.default.subscribe('BeginMediaBroadcast', (msg, data) => {
            this.isStoppingConference = false;
            this.dispatchBeginMediaBroadcast(data);
        });
        pubsub_js_1.default.subscribe('EndMediaBroadcast', (msg, data) => {
            this.isStoppingConference = true;
            this.dispatchEndMediaBroadcast();
        });
        pubsub_js_1.default.subscribe('onChromeMessage_SetConferenceAttendeeNames', (msg, data) => {
            this.dispatchSetConferenceAttendeeNames(data);
        });
        pubsub_js_1.default.subscribe('onUnexpectedConferenceWindowClose', (msg, data) => {
            if (this.isConferenceFullScreen) {
                internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
            }
        });
    }
    async startFullScreenActivity(parameters) {
        var _a;
        this.lsaClient.logger.logDebug('ConferenceControllerInterop.startFullScreenActivity(+)');
        await ((_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.setConferenceParams(parameters));
        this.isConferenceFullScreen = !(parameters.windowed);
    }
    async stopFullScreenActivity(parameters) {
        var _a;
        this.lsaClient.logger.logDebug('ConferenceControllerInterop.stopFullScreenActivity(+)');
        if (this.isStoppingConference === false) {
            // We only want to set ourselves to windowed if we are currently full screen
            // and the conference is not in the process of ending.
            const copy = internal_1.ConferenceDirectiveModel.fromAny(parameters);
            copy.windowed = true;
            await ((_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.setConferenceParams(copy));
        }
        this.isConferenceFullScreen = false;
    }
    onConferenceParamsSet() {
        var _a;
        (_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.joinConference();
    }
    dispatchBeginMediaBroadcast(data) {
        var _a;
        this.lsaClient.logger.logInfo('ConferenceControllerInterop.dispatchBeginMediaBroadcast(+)');
        const cdm = internal_1.ConferenceDirectiveModel.fromAny(data);
        this.lsaClient.logger.logDebug('ConferenceDirectiveModel data: ' + JSON.stringify(cdm));
        if (cdm.windowed === true) {
            internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
            (_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.setConferenceParams(cdm);
        }
        else {
            // Full screen requested
            internal_1.FullScreenActivityDirector.getInstance().queueActivity(FullScreenShowTeacherPriority, this, cdm);
        }
    }
    dispatchEndMediaBroadcast() {
        var _a;
        this.lsaClient.logger.logInfo('ConferenceControllerInterop.dispatchEndMediaBroadcast(+)');
        internal_1.FullScreenActivityDirector.getInstance().removeActivity(FullScreenShowTeacherPriority);
        (_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.leaveConference();
    }
    dispatchSetConferenceAttendeeNames(data) {
        var _a;
        (_a = this.lsaClient.conferenceDirectiveHandler) === null || _a === void 0 ? void 0 : _a.setConferenceAttendeeNames(internal_1.ConferenceAttendeeNamesEventModel.fromAny(data));
    }
}
exports.ConferenceControllerInterop = ConferenceControllerInterop;
//# sourceMappingURL=conferenceControllerInterop.js.map