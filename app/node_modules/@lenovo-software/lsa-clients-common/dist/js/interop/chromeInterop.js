"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.chromeMessenger = exports.chrome = void 0;
const pubsub_js_1 = require("pubsub-js");
const internal_1 = require("../../internal");
var chrome = {
    runtime: {
        onMessage: {
            addListener: function (cb) {
                exports.chromeMessenger.listeners.push(cb);
            }
        },
        reload: () => {
            internal_1.LSAClient.getInstance().runtime.restartAgent();
        },
        sendMessage: function (param) {
            if (param && param.message) {
                switch (param.message) {
                    case 'SetConferenceAttendeeNames': {
                        pubsub_js_1.PubSub.publish('onChromeMessage_SetConferenceAttendeeNames', param.data);
                        break;
                    }
                    case 'CloseMonitoringStatusWindow': {
                        pubsub_js_1.PubSub.publish('onChromeMessage_CloseMonitoringStatusWindow');
                        break;
                    }
                    case 'LogMsg': {
                        // No-op but added here in case we need it at some point.
                        break;
                    }
                    case 'ToWebView': {
                        pubsub_js_1.PubSub.publish('onChromeMessage_ToWebView', param.params);
                        break;
                    }
                }
            }
        },
        id: 0,
        lastError: null
    },
    i18n: {
        getMessage: function (strLookup) {
            return internal_1.i18nController.getMessage(strLookup);
        }
    },
    system: {
        network: {
            getNetworkInterfaces: function (callback) {
                // TODO: Ask the LSAClient caller to provide this.
                if (callback) {
                    callback('NETWORK INTERFACE INSTRUMENTATION NOT IMPLEMENTED');
                }
            }
        }
    },
    contextMenus: {
        remove: function (contextMenuId) {
            if (internal_1.LSAClient.getInstance().contextMenu) {
                internal_1.LSAClient.getInstance().contextMenu.removeMenuItem(contextMenuId);
            }
        },
        create: function (params, onError) {
            let ret = '';
            if (internal_1.LSAClient.getInstance().contextMenu) {
                let menuItem = internal_1.ContextMenuItemParameters.fromAny(params);
                menuItem.onError = onError;
                ret =
                    internal_1.LSAClient.getInstance().contextMenu.createMenuItem(menuItem);
            }
            return ret;
        }
    }
};
exports.chrome = chrome;
class ChromeMessenger {
    constructor() {
        this.listeners = [];
    }
    executeListeners(request, sender, sendResponse) {
        for (let i = 0; i < this.listeners.length; i++) {
            if (this.listeners[i]) {
                this.listeners[i](request, sender, sendResponse);
            }
        }
    }
}
exports.chromeMessenger = new ChromeMessenger();
//# sourceMappingURL=chromeInterop.js.map