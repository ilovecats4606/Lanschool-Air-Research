"use strict";
// Copyright Â© 2024 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeetingDataRetriever = void 0;
const internal_1 = require("./internal");
const logger = new internal_1.LoggerInterop();
class MeetingDataRetriever {
    constructor(params) {
        this.apiServer = '';
        this.deviceId = '';
        this.provisioningCode = '';
        this.apiServer = params.apiServer;
        this.deviceId = params.deviceId;
        this.provisioningCode = params.provisioningCode;
    }
    async getOAuthToken() {
        let oauthToken;
        try {
            logger.logInfo('MeetingDataRetriever.getOAuthToken: deviceId = ' +
                this.deviceId + ", provisioningCode = " + this.provisioningCode);
            const authResponse = await internal_1.AccessToken.getAccessToken(this.apiServer, this.deviceId, this.provisioningCode);
            logger.logInfo('MeetingDataRetriever.getOAuthToken: received authResponse = ' + JSON.stringify(authResponse));
            oauthToken = authResponse.access_token;
        }
        catch (err) {
            logger.logError('MeetingDataRetriever.getOAuthToken: Error retrieving auth token: ' + err);
            throw err;
        }
        if (!oauthToken) {
            logger.logError('MeetingDataRetriever.getOAuthToken: Auth token missing.');
            throw new Error('Auth token missing \'access_token\'');
        }
        return oauthToken;
    }
}
exports.MeetingDataRetriever = MeetingDataRetriever;
//# sourceMappingURL=meetingDataRetriever.js.map