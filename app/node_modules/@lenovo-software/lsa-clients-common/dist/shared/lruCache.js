"use strict";
// Copyright Â© 2024 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.LRUCache = void 0;
class LRUCache {
    constructor(maxItems = 20) {
        this.maxItems = maxItems;
        this.cache = new Map();
    }
    /**
     * Get an item from the cache
     */
    get(key) {
        if (this.cache.has(key)) {
            const value = this.cache.get(key);
            // Move the recently accessed entry to the end
            if (value) {
                this.cache.delete(key);
                this.cache.set(key, value);
            }
            return value;
        }
    }
    /**
     * Set an item in the cache
     */
    set(key, value) {
        if (this.cache.has(key)) {
            this.cache.delete(key);
        }
        else if (this.cache.size >= this.maxItems) {
            // Evict the oldest item (least recently used)
            const oldestKey = this.cache.keys().next().value;
            if (oldestKey) {
                this.cache.delete(oldestKey);
            }
        }
        // Insert the item at the end (most recently used)
        this.cache.set(key, value);
    }
    /**
     * Item with specified key exists in the cache or not
     */
    has(key) {
        return this.cache.has(key);
    }
    /**
     * Clears all entries from the cache
     */
    clear() {
        this.cache.clear();
    }
}
exports.LRUCache = LRUCache;
//# sourceMappingURL=lruCache.js.map