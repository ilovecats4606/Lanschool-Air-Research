"use strict";
// Copyright Â© 2023 Lenovo. All rights reserved.
// Confidential and Restricted
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketEndpoint = void 0;
const internal_1 = require("./internal");
class SocketEndpoint {
    static retrieveSocketServer(apiServer, token) {
        if (!apiServer.endsWith("/"))
            apiServer += "/";
        return new Promise((resolve, reject) => {
            internal_1.routeVerifier.verify(apiServer + internal_1.Endpoints.SocketServerEndpoint, async (url) => {
                var _a, _b;
                try {
                    const response = await internal_1.httpAPI.get(url, token);
                    if ((_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.lsa) {
                        resolve({ socketServerEndpoint: (_b = response === null || response === void 0 ? void 0 : response.data) === null || _b === void 0 ? void 0 : _b.lsa });
                    }
                    else {
                        reject({ error: "Invalid Socket Endpoint response data" });
                    }
                }
                catch (error) {
                    const err = error;
                    reject({ error: err.message, errorCode: err.code });
                }
            });
        });
    }
}
exports.SocketEndpoint = SocketEndpoint;
//# sourceMappingURL=socketEndpoint.js.map